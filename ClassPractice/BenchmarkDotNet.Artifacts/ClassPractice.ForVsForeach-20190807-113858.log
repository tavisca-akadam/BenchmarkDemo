// Validating benchmarks:
// ***** BenchmarkRunner: Start   *****
// ***** Found 2 benchmark(s) in total *****
// ***** Building 1 exe(s) in Parallel: Start   *****
// start dotnet restore  /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1 in C:\Users\ankadam\source\repos\ClassPractice\ClassPractice\bin\Release\netcoreapp2.2\97cc73cc-309c-4dba-9645-f52ae20a6912
// command took 3.99s and exited with 0
// start dotnet build -c Release  --no-restore /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1 in C:\Users\ankadam\source\repos\ClassPractice\ClassPractice\bin\Release\netcoreapp2.2\97cc73cc-309c-4dba-9645-f52ae20a6912
// command took 15.15s and exited with 1
// start dotnet build -c Release  --no-restore --no-dependencies /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1 in C:\Users\ankadam\source\repos\ClassPractice\ClassPractice\bin\Release\netcoreapp2.2\97cc73cc-309c-4dba-9645-f52ae20a6912
// command took 5.07s and exited with 0
// ***** Done, took 00:00:24 (24.61 sec)   *****
// Found 2 benchmarks:
//   ForVsForeach.UsingFor: DefaultJob
//   ForVsForeach.UsingForEach: DefaultJob

Setup power plan (GUID: 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c FriendlyName: High performance)// **************************
// Benchmark: ForVsForeach.UsingFor: DefaultJob
// *** Execute ***
// Launch: 1 / 1
// Execute: dotnet "97cc73cc-309c-4dba-9645-f52ae20a6912.dll" --benchmarkName "ClassPractice.ForVsForeach.UsingFor" --job "Default" --benchmarkId 0 in C:\Users\ankadam\source\repos\ClassPractice\ClassPractice\bin\Release\netcoreapp2.2\97cc73cc-309c-4dba-9645-f52ae20a6912\bin\Release\netcoreapp2.2
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET Core 2.2.6 (CoreCLR 4.6.27817.03, CoreFX 4.6.27818.02), 64bit RyuJIT
// GC=Concurrent Workstation
// Job: DefaultJob

OverheadJitting  1: 1 op, 362848.54 ns, 362.8485 us/op
WorkloadJitting  1: 1 op, 944500.22 ns, 944.5002 us/op

OverheadJitting  2: 16 op, 302313.00 ns, 18.8946 us/op
WorkloadJitting  2: 16 op, 1577570.64 ns, 98.5982 us/op

WorkloadPilot    1: 16 op, 11309934.28 ns, 706.8709 us/op
WorkloadPilot    2: 32 op, 14637200.69 ns, 457.4125 us/op
WorkloadPilot    3: 64 op, 39646399.54 ns, 619.4750 us/op
WorkloadPilot    4: 128 op, 187203225.45 ns, 1.4625 ms/op
WorkloadPilot    5: 256 op, 666490408.58 ns, 2.6035 ms/op

OverheadWarmup   1: 256 op, 2552.70 ns, 9.9715 ns/op
OverheadWarmup   2: 256 op, 1094.02 ns, 4.2735 ns/op
OverheadWarmup   3: 256 op, 1094.02 ns, 4.2735 ns/op
OverheadWarmup   4: 256 op, 4011.39 ns, 15.6695 ns/op
OverheadWarmup   5: 256 op, 1094.02 ns, 4.2735 ns/op
OverheadWarmup   6: 256 op, 729.34 ns, 2.8490 ns/op
OverheadWarmup   7: 256 op, 1094.02 ns, 4.2735 ns/op

OverheadActual   1: 256 op, 729.34 ns, 2.8490 ns/op
OverheadActual   2: 256 op, 729.34 ns, 2.8490 ns/op
OverheadActual   3: 256 op, 1094.02 ns, 4.2735 ns/op
OverheadActual   4: 256 op, 3646.72 ns, 14.2450 ns/op
OverheadActual   5: 256 op, 729.34 ns, 2.8490 ns/op
OverheadActual   6: 256 op, 1094.02 ns, 4.2735 ns/op
OverheadActual   7: 256 op, 1094.02 ns, 4.2735 ns/op
OverheadActual   8: 256 op, 1094.02 ns, 4.2735 ns/op
OverheadActual   9: 256 op, 4011.39 ns, 15.6695 ns/op
OverheadActual  10: 256 op, 1094.02 ns, 4.2735 ns/op
OverheadActual  11: 256 op, 3646.72 ns, 14.2450 ns/op
OverheadActual  12: 256 op, 729.34 ns, 2.8490 ns/op
OverheadActual  13: 256 op, 5470.08 ns, 21.3675 ns/op
OverheadActual  14: 256 op, 729.34 ns, 2.8490 ns/op
OverheadActual  15: 256 op, 5470.08 ns, 21.3675 ns/op
OverheadActual  16: 256 op, 729.34 ns, 2.8490 ns/op
OverheadActual  17: 256 op, 1094.02 ns, 4.2735 ns/op
OverheadActual  18: 256 op, 1094.02 ns, 4.2735 ns/op
OverheadActual  19: 256 op, 4011.39 ns, 15.6695 ns/op
OverheadActual  20: 256 op, 4011.39 ns, 15.6695 ns/op

WorkloadWarmup   1: 256 op, 1632237506.43 ns, 6.3759 ms/op
WorkloadWarmup   2: 256 op, 948211120.23 ns, 3.7039 ms/op
WorkloadWarmup   3: 256 op, 2345141895.66 ns, 9.1607 ms/op
WorkloadWarmup   4: 256 op, 5733805923.80 ns, 22.3977 ms/op
WorkloadWarmup   5: 256 op, 1740937447.46 ns, 6.8005 ms/op
WorkloadWarmup   6: 256 op, 1915356370.14 ns, 7.4819 ms/op

OutOfMemoryException!
BenchmarkDotNet continues to run additional iterations until desired accuracy level is achieved. It's possible only if the benchmark method doesn't have any side-effects.
If your benchmark allocates memory and keeps it alive, you are creating a memory leak.
You should redesign your benchmark and remove the side-effects. You can use `OperationsPerInvoke`, `IterationSetup` and `IterationCleanup` to do that.

System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.OutOfMemoryException: Exception of type 'System.OutOfMemoryException' was thrown.
   at System.Collections.Generic.List`1.set_Capacity(Int32 value)
   at System.Collections.Generic.List`1.AddWithResize(T item)
   at ClassPractice.ForVsForeach.UsingFor() in C:\Users\ankadam\source\repos\ClassPractice\ClassPractice\Program.cs:line 61
   at BenchmarkDotNet.Autogenerated.Runnable_0.WorkloadActionUnroll(Int64 invokeCount) in C:\Users\ankadam\source\repos\ClassPractice\ClassPractice\bin\Release\netcoreapp2.2\97cc73cc-309c-4dba-9645-f52ae20a6912\97cc73cc-309c-4dba-9645-f52ae20a6912.notcs:line 732
   at BenchmarkDotNet.Engines.Engine.RunIteration(IterationData data)
   at BenchmarkDotNet.Engines.EngineStage.RunIteration(IterationMode mode, IterationStage stage, Int32 index, Int64 invokeCount, Int32 unrollFactor)
   at BenchmarkDotNet.Engines.EngineStage.Run(IStoppingCriteria criteria, Int64 invokeCount, IterationMode mode, IterationStage stage, Int32 unrollFactor)
   at BenchmarkDotNet.Engines.EngineWarmupStage.Run(Int64 invokeCount, IterationMode iterationMode, Int32 unrollFactor, RunStrategy runStrategy)
   at BenchmarkDotNet.Engines.Engine.Run()
   at BenchmarkDotNet.Autogenerated.Runnable_0.Run(IHost host, String benchmarkName) in C:\Users\ankadam\source\repos\ClassPractice\ClassPractice\bin\Release\netcoreapp2.2\97cc73cc-309c-4dba-9645-f52ae20a6912\97cc73cc-309c-4dba-9645-f52ae20a6912.notcs:line 168
   --- End of inner exception stack trace ---
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor, Boolean wrapExceptions)
   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
   at BenchmarkDotNet.Autogenerated.UniqueProgramName.AfterAssemblyLoadingAttached(String[] args) in C:\Users\ankadam\source\repos\ClassPractice\ClassPractice\bin\Release\netcoreapp2.2\97cc73cc-309c-4dba-9645-f52ae20a6912\97cc73cc-309c-4dba-9645-f52ae20a6912.notcs:line 49
// AfterAll
ExitCode != 0
No more Benchmark runs will be launched as NO measurements were obtained from the previous run!


// **************************
// Benchmark: ForVsForeach.UsingForEach: DefaultJob
// *** Execute ***
// Launch: 1 / 1
// Execute: dotnet "97cc73cc-309c-4dba-9645-f52ae20a6912.dll" --benchmarkName "ClassPractice.ForVsForeach.UsingForEach" --job "Default" --benchmarkId 1 in C:\Users\ankadam\source\repos\ClassPractice\ClassPractice\bin\Release\netcoreapp2.2\97cc73cc-309c-4dba-9645-f52ae20a6912\bin\Release\netcoreapp2.2
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET Core 2.2.6 (CoreCLR 4.6.27817.03, CoreFX 4.6.27818.02), 64bit RyuJIT
// GC=Concurrent Workstation
// Job: DefaultJob

OverheadJitting  1: 1 op, 494859.77 ns, 494.8598 us/op
WorkloadJitting  1: 1 op, 907668.36 ns, 907.6684 us/op

OverheadJitting  2: 16 op, 306324.40 ns, 19.1453 us/op
WorkloadJitting  2: 16 op, 1768294.04 ns, 110.5184 us/op

WorkloadPilot    1: 16 op, 5474819.22 ns, 342.1762 us/op
WorkloadPilot    2: 32 op, 16062338.47 ns, 501.9481 us/op
WorkloadPilot    3: 64 op, 44184741.33 ns, 690.3866 us/op
WorkloadPilot    4: 128 op, 198703518.46 ns, 1.5524 ms/op
WorkloadPilot    5: 256 op, 782324790.65 ns, 3.0560 ms/op

OverheadWarmup   1: 256 op, 2552.70 ns, 9.9715 ns/op
OverheadWarmup   2: 256 op, 1094.02 ns, 4.2735 ns/op
OverheadWarmup   3: 256 op, 3646.72 ns, 14.2450 ns/op
OverheadWarmup   4: 256 op, 1094.02 ns, 4.2735 ns/op
OverheadWarmup   5: 256 op, 1094.02 ns, 4.2735 ns/op
OverheadWarmup   6: 256 op, 729.34 ns, 2.8490 ns/op

OverheadActual   1: 256 op, 729.34 ns, 2.8490 ns/op
OverheadActual   2: 256 op, 1094.02 ns, 4.2735 ns/op
OverheadActual   3: 256 op, 1094.02 ns, 4.2735 ns/op
OverheadActual   4: 256 op, 1094.02 ns, 4.2735 ns/op
OverheadActual   5: 256 op, 1458.69 ns, 5.6980 ns/op
OverheadActual   6: 256 op, 2188.03 ns, 8.5470 ns/op
OverheadActual   7: 256 op, 3646.72 ns, 14.2450 ns/op
OverheadActual   8: 256 op, 729.34 ns, 2.8490 ns/op
OverheadActual   9: 256 op, 729.34 ns, 2.8490 ns/op
OverheadActual  10: 256 op, 30632.44 ns, 119.6580 ns/op
OverheadActual  11: 256 op, 3646.72 ns, 14.2450 ns/op
OverheadActual  12: 256 op, 1094.02 ns, 4.2735 ns/op
OverheadActual  13: 256 op, 1094.02 ns, 4.2735 ns/op
OverheadActual  14: 256 op, 729.34 ns, 2.8490 ns/op
OverheadActual  15: 256 op, 1094.02 ns, 4.2735 ns/op
OverheadActual  16: 256 op, 2188.03 ns, 8.5470 ns/op
OverheadActual  17: 256 op, 1094.02 ns, 4.2735 ns/op
OverheadActual  18: 256 op, 1094.02 ns, 4.2735 ns/op
OverheadActual  19: 256 op, 1458.69 ns, 5.6980 ns/op
OverheadActual  20: 256 op, 1094.02 ns, 4.2735 ns/op

WorkloadWarmup   1: 256 op, 1664757487.72 ns, 6.5030 ms/op
WorkloadWarmup   2: 256 op, 1109746184.71 ns, 4.3349 ms/op
WorkloadWarmup   3: 256 op, 2721927830.70 ns, 10.6325 ms/op
WorkloadWarmup   4: 256 op, 5004179869.31 ns, 19.5476 ms/op
WorkloadWarmup   5: 256 op, 2153403975.14 ns, 8.4117 ms/op
WorkloadWarmup   6: 256 op, 2455715885.58 ns, 9.5926 ms/op

OutOfMemoryException!
BenchmarkDotNet continues to run additional iterations until desired accuracy level is achieved. It's possible only if the benchmark method doesn't have any side-effects.
If your benchmark allocates memory and keeps it alive, you are creating a memory leak.
You should redesign your benchmark and remove the side-effects. You can use `OperationsPerInvoke`, `IterationSetup` and `IterationCleanup` to do that.

System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.OutOfMemoryException: Exception of type 'System.OutOfMemoryException' was thrown.
   at System.Collections.Generic.List`1.set_Capacity(Int32 value)
   at System.Collections.Generic.List`1.AddWithResize(T item)
   at ClassPractice.ForVsForeach.UsingForEach() in C:\Users\ankadam\source\repos\ClassPractice\ClassPractice\Program.cs:line 71
   at BenchmarkDotNet.Autogenerated.Runnable_1.WorkloadActionUnroll(Int64 invokeCount) in C:\Users\ankadam\source\repos\ClassPractice\ClassPractice\bin\Release\netcoreapp2.2\97cc73cc-309c-4dba-9645-f52ae20a6912\97cc73cc-309c-4dba-9645-f52ae20a6912.notcs:line 1376
   at BenchmarkDotNet.Engines.Engine.RunIteration(IterationData data)
   at BenchmarkDotNet.Engines.EngineStage.RunIteration(IterationMode mode, IterationStage stage, Int32 index, Int64 invokeCount, Int32 unrollFactor)
   at BenchmarkDotNet.Engines.EngineStage.Run(IStoppingCriteria criteria, Int64 invokeCount, IterationMode mode, IterationStage stage, Int32 unrollFactor)
   at BenchmarkDotNet.Engines.EngineWarmupStage.Run(Int64 invokeCount, IterationMode iterationMode, Int32 unrollFactor, RunStrategy runStrategy)
   at BenchmarkDotNet.Engines.Engine.Run()
   at BenchmarkDotNet.Autogenerated.Runnable_1.Run(IHost host, String benchmarkName) in C:\Users\ankadam\source\repos\ClassPractice\ClassPractice\bin\Release\netcoreapp2.2\97cc73cc-309c-4dba-9645-f52ae20a6912\97cc73cc-309c-4dba-9645-f52ae20a6912.notcs:line 812
   --- End of inner exception stack trace ---
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor, Boolean wrapExceptions)
   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
   at BenchmarkDotNet.Autogenerated.UniqueProgramName.AfterAssemblyLoadingAttached(String[] args) in C:\Users\ankadam\source\repos\ClassPractice\ClassPractice\bin\Release\netcoreapp2.2\97cc73cc-309c-4dba-9645-f52ae20a6912\97cc73cc-309c-4dba-9645-f52ae20a6912.notcs:line 49
// AfterAll
ExitCode != 0
No more Benchmark runs will be launched as NO measurements were obtained from the previous run!


Successfully reverted power plan (GUID: 381b4222-f694-41f0-9685-ff5bb260df2e FriendlyName: Balanced)
// ***** BenchmarkRunner: Finish  *****

// * Export *
  BenchmarkDotNet.Artifacts\results\ClassPractice.ForVsForeach-report.csv
  BenchmarkDotNet.Artifacts\results\ClassPractice.ForVsForeach-report-github.md
  BenchmarkDotNet.Artifacts\results\ClassPractice.ForVsForeach-report.html

// * Detailed results *
ForVsForeach.UsingFor: DefaultJob
Runtime = ; GC = 
There are not any results runs

ForVsForeach.UsingForEach: DefaultJob
Runtime = ; GC = 
There are not any results runs

// * Summary *

BenchmarkDotNet=v0.11.5, OS=Windows 10.0.17134.885 (1803/April2018Update/Redstone4)
Intel Core i7-6600U CPU 2.60GHz (Skylake), 1 CPU, 4 logical and 2 physical cores
Frequency=2742191 Hz, Resolution=364.6719 ns, Timer=TSC
.NET Core SDK=2.2.108
  [Host] : .NET Core 2.2.6 (CoreCLR 4.6.27817.03, CoreFX 4.6.27818.02), 64bit RyuJIT  [AttachedDebugger]


|       Method | Mean | Error |
|------------- |-----:|------:|
|     UsingFor |   NA |    NA |
| UsingForEach |   NA |    NA |

Benchmarks with issues:
  ForVsForeach.UsingFor: DefaultJob
  ForVsForeach.UsingForEach: DefaultJob

// * Warnings *
Environment
  Summary -> Benchmark was executed with attached debugger
  Summary -> Detected error exit code from one of the benchmarks. It might be caused by following antivirus software:
        - McAfee Endpoint Security (C:\Program Files (x86)\McAfee\Endpoint Security\Threat Prevention\AMCFG.EXE)
        - Windows Defender (windowsdefender://)
Use InProcessToolchain to avoid new process creation.


// * Legends *
  Mean  : Arithmetic mean of all measurements
  Error : Half of 99.9% confidence interval
  1 ns  : 1 Nanosecond (0.000000001 sec)

// ***** BenchmarkRunner: End *****
// ** Remained 0 benchmark(s) to run **
Run time: 00:00:39 (39.16 sec), executed benchmarks: 2

Global total time: 00:01:03 (63.79 sec), executed benchmarks: 2
// * Artifacts cleanup *
